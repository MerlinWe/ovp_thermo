text = element_text(size = 14),
strip.text = element_text(size = 14, face = "bold"),  # Facet labels (Light condition) bold and clear
legend.position = "right",
axis.text.x = element_text(size = 12, angle = 30, hjust = 1),  # Rotated x-axis labels for clarity
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5))
temperature_labels <- c("control" = "21 °C", "warm" = "26 °C", "hot" = "30 °C")
# heatmap
pr_plot <- emm_pr %>%
mutate(label = paste0(round(response, 2), "\n± ", round(SE, 2))) %>%  # Add line break before SE
ggplot(aes(x = Temp_cat, y = Species, fill = response)) +
geom_tile(color = "white", size = 0.3) +  # Thin white borders for clarity
facet_wrap(~ Light, labeller = labeller(Light = c("control" = "Low Light",
"medium" = "Medium Light",
"high" = "High Light"))) +
scale_fill_gradientn(
colors = pr_colors,
values = scales::rescale(pr_breaks),  # Rescale breaks to fit gradient
limits = c(0, max(emm_pr$response)),
name = "P:R Ratio") +
scale_x_discrete(labels = temperature_labels) +
geom_text(aes(label = label), color = "white", fontface = "bold", size = 4.5) +  # White bold text with line break
labs(
x = NULL,
y = NULL) +
theme_few(base_size = 14, base_family = "Palatino") +  # Clean professional theme
theme(
text = element_text(size = 14),
strip.text = element_text(size = 14, face = "bold"),  # Facet labels (Light condition) bold and clear
legend.position = "right",
axis.text.x = element_text(size = 12, angle = 30, hjust = 1),  # Rotated x-axis labels for clarity
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5))
ggsave(filename = "/Users/serpent/Desktop/pr_plot.png",
plot = pr_plot,
bg = "transparent",
width = 290,
height = 190,
units = "mm",
dpi = 800)
# heatmap
pr_plot <- emm_pr %>%
mutate(label = paste0(round(response, 2), "\n± ", round(SE, 2))) %>%  # Add line break before SE
ggplot(aes(x = Temp_cat, y = Species, fill = response)) +
geom_tile(color = "white", size = 0.3) +  # Thin white borders for clarity
facet_wrap(~ Light, labeller = labeller(Light = c("control" = "Control Light",
"medium" = "Medium Light",
"high" = "High Light"))) +
scale_fill_gradientn(
colors = pr_colors,
values = scales::rescale(pr_breaks),  # Rescale breaks to fit gradient
limits = c(0, max(emm_pr$response)),
name = "P:R Ratio") +
scale_x_discrete(labels = temperature_labels) +
geom_text(aes(label = label), color = "white", fontface = "bold", size = 4.5) +  # White bold text with line break
labs(
x = NULL,
y = NULL) +
theme_few(base_size = 14, base_family = "Palatino") +  # Clean professional theme
theme(
text = element_text(size = 14),
strip.text = element_text(size = 14, face = "bold"),  # Facet labels (Light condition) bold and clear
legend.position = "right",
axis.text.x = element_text(size = 12, angle = 30, hjust = 1),  # Rotated x-axis labels for clarity
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5))
ggsave(filename = "/Users/serpent/Desktop/pr_plot.png",
plot = pr_plot,
bg = "transparent",
width = 290,
height = 190,
units = "mm",
dpi = 800)
# with random intercept
mod1 <- lmer(PR_ratio ~ Temp_cat * Light * Species + (1 | Species), data = dat)
# with random slope
mod2 <- lmer(PR_ratio ~ Temp_cat * Light * Species + (Temp_cat + Light | Species), data = dat)
anova(mod1, mod2) # no sig improvement for random slopes but overcomplicated...
# continue with mod1
summary(mod1)
AIC(mod1)
anova(mod1)
par(mfrow=c(2,2))
plot(mod1) # not too bad
hist(mod1$residuals)
hist(mod1$residuals)
residuals(mod1)
hist(residuals(mod1))
hist(residuals(mod1, method = "pearson"))
plot(mod1) # not too bad
qqplot(mod1)
qqnorm(residuals(mod1))
qqline(residuals(mod1), col = "red")
# species variation is again very small... prob no random effect needed
mod3 <- lm(PR_ratio ~ Temp_cat * Light * Species, data = dat)
anova(mod3)
summary(mod3)
par(mfrow=c(2,2))
plot(mod3) # not too bad
hist(mod3$residuals)
dev.off()
hist(mod3$residuals)
mod_4 <- glm(PR_ratio ~ Temp_cat * Light * Species,
family = Gamma(link = "log"), data = dat)
anova(mod_4)
summary(mod_4)
par(mfrow=c(2,2))
plot(mod_pr) # normality problems, but we're not looking at p-values so it's fine. Estimates and emmeans should be reliable enough...
plot(mod_4) # normality problems, but we're not looking at p-values so it's fine. Estimates and emmeans should be reliable enough...
dev.off()
hist(mod_pr$residuals)
hist(mod_4$residuals)
mod_final <- stepAIC(mod4, direction = "backward")
mod_4 <- glm(PR_ratio ~ Temp_cat * Light * Species,
family = Gamma(link = "log"), data = dat)
mod_final <- stepAIC(mod4, direction = "backward")
mod_final <- stepAIC(mod_4, direction = "backward")
# this is the top model
mod_pr <- glm(PR_ratio ~ Temp_cat * Light * Species,
family = Gamma(link = "log"), data = dat)
# estimate marginal means
emmeans(mod_pr, ~ Species | Temp_cat * Light, type = "response")
emm_pr <- as.data.frame(emmeans(mod_pr, ~ Species | Temp_cat * Light, type = "response"))
# Define biologically relevant colours and breaks
pr_colors <- c("darkred", "orange", "darkgreen", "blue")
pr_breaks <- c(0.5, 1.0, 3.0, 5.0, max(emm_pr$response))
# heatmap
pr_plot <- emm_pr %>%
mutate(label = paste0(round(response, 2), "\n± ", round(SE, 2))) %>%  # Add line break before SE
ggplot(aes(x = Temp_cat, y = Species, fill = response)) +
geom_tile(color = "white", size = 0.3) +  # Thin white borders for clarity
facet_wrap(~ Light, labeller = labeller(Light = c("control" = "Control Light",
"medium" = "Medium Light",
"high" = "High Light"))) +
scale_fill_gradientn(
colors = pr_colors,
values = scales::rescale(pr_breaks),  # Rescale breaks to fit gradient
limits = c(0, max(emm_pr$response)),
name = "P:R Ratio") +
scale_x_discrete(labels = temperature_labels) +
geom_text(aes(label = label), color = "white", fontface = "bold", size = 4.5) +  # White bold text with line break
labs(
x = NULL,
y = NULL) +
theme_few(base_size = 14, base_family = "Palatino") +  # Clean professional theme
theme(
text = element_text(size = 14),
strip.text = element_text(size = 14, face = "bold"),  # Facet labels (Light condition) bold and clear
legend.position = "right",
axis.text.x = element_text(size = 12, angle = 30, hjust = 1),  # Rotated x-axis labels for clarity
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5))
pr_plot
##################################################################################
############################ OVP analysis: summer day ############################
##################################################################################
rm(list = ls()); gc() # make sure environment is clean
export = TRUE # Export?
# Activate package libraries
library(patchwork)
library(feather)
library(mgcv)
library(car)
library(ggeffects)
library(MASS)
library(emmeans)
library(gamm4)
library(effects)
library(stats)
library(lme4)
library(lmerTest)
library(performance)
library(nlme)
library(piecewiseSEM)
library(tidyverse)
# Set WD and get source code functions
setwd("/Users/serpent/Documents/VHL/OVP/Code/Analysis")
source(url("https://raw.githubusercontent.com/MerlinWe/ovp_thermo/main/Analysis/SEM_(MWE)/functions.R"))
# Read data
dat <- read_csv("/Users/serpent/Documents/VHL/OVP/Data/ovp_data_10_12_24.csv")
# Get summer day subset
summer <- dat %>% prep_ovp("Summer", "day") # ok
##### ----------- Exploration ---------- #####
colSums(is.na(summer)) # no missing values
# Check response variables
plot1 <- check_response_var(summer, "mean_BT_smooth", "Mean BT Smooth")
plot2 <- check_response_var(summer, "mean_activity_percent", "Mean Activity Percent")
plot3 <- check_response_var(summer, "mean_heartrate", "Mean Heartrate")
(plot1 | plot2 | plot3)
rm(plot1, plot2, plot3) # clean environment
## Note: we disregard WCF (wind chill factor) due to high collinearity
response_vars <- c("mean_BT_smooth", "mean_heartrate", "mean_activity_percent")
predictor_vars <- c("phase_mean_CT", "day_season", "weight", "mean_activity_percent")
## Check linearity
exploration_results <- explore_relationships(summer, response_vars, predictor_vars, random_effect = list(ID = ~1))
edf_summary <- exploration_results$edf_summary  # Extract EDF summary
## Check autocorrelation
autocorr_BT <- assess_autocorrelation(summer, "mean_BT_smooth", "ID", "season_year", lags = 40)
autocorr_HR <- assess_autocorrelation(summer, "mean_heartrate", "ID", "season_year", lags = 40)
autocorr_AC <- assess_autocorrelation(summer, "mean_activity_percent", "ID", "season_year", lags = 40)
## Check random effect
random_factor_BT <- explore_random_factor(summer, "mean_BT_smooth", "ID")
random_factor_HR <- explore_random_factor(summer, "mean_heartrate", "ID")
random_factor_AC <- explore_random_factor(summer, "mean_activity_percent", "ID")
## Check Interactions
interaction_results <- list(
"mean_BT_smooth ~ mean_activity_percent * season_year" = test_interaction(summer, "mean_BT_smooth", "mean_activity_percent", "season_year", random_effect = ~1 + mean_activity_percent | ID_phase),
"mean_heartrate ~ mean_activity_percent * season_year" = test_interaction(summer, "mean_heartrate", "mean_activity_percent", "season_year", random_effect = ~1 + mean_activity_percent | ID_phase),
"mean_BT_smooth ~ phase_mean_CT * season_year" = test_interaction(summer, "mean_BT_smooth", "phase_mean_CT", "season_year", random_effect = ~1 + mean_activity_percent | ID_phase),
"mean_heartrate ~ phase_mean_CT * season_year" = test_interaction(summer, "mean_heartrate", "phase_mean_CT", "season_year", random_effect = ~1 + mean_activity_percent | ID_phase),
"mean_activity_percent ~ phase_mean_CT * season_year" = test_interaction(summer, "mean_activity_percent", "phase_mean_CT", "season_year", random_effect = ~1 | ID_phase))
# Get variable descriptives
descriptive_stats <- compute_descriptive_stats(summer, c("mean_BT_smooth", "mean_activity_percent", "mean_heartrate", "phase_mean_CT"))
print(descriptive_stats)
##### ----------- Model Selection & Validation ---------- #####
# •	Test random intercept vs. random slopes.
# •	Use AIC/BIC to decide which random effects to retain.
# •	Use stepAIC() to iteratively refine the fixed effect structure.
# •	Keep only significant predictors.
# •	Check residual normality.
# •	Test autocorrelation of residuals.
# •	Assess model fit using observed vs. predicted values.
# •	Fit final models for HR, BT, ACT.
# •	Combine into a structural equation model (SEM) using piecewiseSEM.
# try random slopes for covariates (dynamic quadratic selection based on EDF)
random_slope_candidates <- c("mean_activity_percent", "phase_mean_CT", "day_season")
best_random_effects_model_HR <- test_random_effects(summer, "mean_heartrate", random_slope_candidates, edf_summary)
best_random_effects_model_BT <- test_random_effects(summer, "mean_BT_smooth", random_slope_candidates, edf_summary)
best_random_effects_model_ACT <- test_random_effects(summer, "mean_activity_percent", random_slope_candidates, edf_summary)
# Apply updated fixed effect selection
best_fixed_model_HR <- select_fixed_effects(best_random_effects_model_HR, "mean_heartrate", edf_summary)
best_fixed_model_BT <- select_fixed_effects(best_random_effects_model_BT, "mean_BT_smooth", edf_summary)
best_fixed_model_ACT <- select_fixed_effects(best_random_effects_model_ACT, "mean_activity_percent", edf_summary)
# Validate top models
validate_HR <- validate_model(best_fixed_model_HR, "mean_heartrate", summer, "ID")
# Validate top models
validate_HR <- validate_model(best_fixed_model_HR, "mean_heartrate", summer, "ID")
validate_BT <- validate_model(best_fixed_model_BT, "mean_BT_smooth", summer, "ID")
validate_ACT <- validate_model(best_fixed_model_ACT, "mean_activity_percent", summer, "ID")
# Assess model fit
fit_HR <- assess_model_fit(best_fixed_model_HR, "mean_heartrate")
fit_BT <- assess_model_fit(best_fixed_model_BT, "mean_BT_smooth")
fit_ACT <- assess_model_fit(best_fixed_model_ACT, "mean_activity_percent")
# check top models
top_HR <- best_fixed_model_HR
top_HR$call
top_BT <- best_fixed_model_BT
top_BT$call
top_ACT <- best_fixed_model_ACT
top_ACT$call
# Create quadratic terms explicitly in data
summer <- summer %>%
mutate(
phase_mean_CT_sq = phase_mean_CT^2,
day_season_sq = day_season^2,
weight_sq = weight^2,
day_season = as.numeric(day_season))
top_HR <- nlme::lme(
fixed = mean_heartrate ~ season_year + phase_mean_CT + phase_mean_CT_sq +
day_season + day_season_sq + weight + mean_activity_percent,
data = summer,
random = ~1 + mean_activity_percent | ID_phase,
correlation = corGaus(form = ~ as.numeric(day_season) | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
top_BT <- nlme::lme(
fixed = mean_BT_smooth ~ season_year + phase_mean_CT +
day_season + day_season_sq + mean_activity_percent,
data = summer,
random = ~1 | ID_phase,
correlation = corGaus(form = ~ as.numeric(day_season) | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
top_ACT <- nlme::lme(
fixed = mean_activity_percent ~ season_year + phase_mean_CT +
weight + weight_sq,
data = summer,
random = ~1 + phase_mean_CT | ID_phase,
correlation = corGaus(form = ~ as.numeric(day_season) | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
# Create the piecewise SEM
psem_model <- piecewiseSEM::psem(
top_HR,
top_BT,
top_ACT)
summary(psem_model)
# Fit models without spatial correlation
top_HR_simple <- update(top_HR, correlation = NULL)
top_BT_simple <- update(top_BT, correlation = NULL)
top_ACT_simple <- update(top_ACT, correlation = NULL)
# Re-run the SEM
psem_simple <- piecewiseSEM::psem(
top_HR_simple,
top_BT_simple,
top_ACT_simple
)
summary(psem_simple)  # Does this work?
library(lme4)
# Refit the models using lme4
top_HR_lmer <- lmer(mean_heartrate ~ season_year + phase_mean_CT + phase_mean_CT_sq +
day_season + day_season_sq + weight + mean_activity_percent +
(1 | ID_phase), data = summer)
top_BT_lmer <- lmer(mean_BT_smooth ~ season_year + phase_mean_CT + day_season +
day_season_sq + mean_activity_percent + (1 | ID_phase), data = summer)
top_ACT_lmer <- lmer(mean_activity_percent ~ season_year + phase_mean_CT + weight +
weight_sq + (1 | ID_phase), data = summer)
# Run SEM with lmer models
psem_lmer <- piecewiseSEM::psem(top_HR_lmer, top_BT_lmer, top_ACT_lmer)
summary(psem_lmer)  # Does this work?
top_HR_lmer <- lmer(mean_heartrate ~ season_year + phase_mean_CT + phase_mean_CT_sq +
day_season + day_season_sq + weight + mean_activity_percent +
(1 + mean_activity_percent | ID_phase), data = summer)
top_BT_lmer <- lmer(mean_BT_smooth ~ season_year + phase_mean_CT + day_season +
day_season_sq + mean_activity_percent +
(1 | ID_phase), data = summer)
top_ACT_lmer <- lmer(mean_activity_percent ~ season_year + phase_mean_CT + weight +
weight_sq + (1 + phase_mean_CT | ID_phase), data = summer)
psem_lmer <- piecewiseSEM::psem(top_HR_lmer, top_BT_lmer, top_ACT_lmer)
summary(psem_lmer)  # Does this work?
summary(summer)
summer
summer
glimpse(summer)
top_HR <- nlme::lme(
fixed = mean_heartrate ~ season_year + phase_mean_CT + phase_mean_CT_sq +
day_season + day_season_sq + weight + mean_activity_percent,
data = summer,
random = ~1 + mean_activity_percent | ID_phase,
correlation = corGaus(form = ~ day_season | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
top_BT <- nlme::lme(
fixed = mean_BT_smooth ~ season_year + phase_mean_CT +
day_season + day_season_sq + mean_activity_percent,
data = summer,
random = ~1 | ID_phase,
correlation = corGaus(form = ~ day_season | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
top_ACT <- nlme::lme(
fixed = mean_activity_percent ~ season_year + phase_mean_CT +
weight + weight_sq,
data = summer,
random = ~1 + phase_mean_CT | ID_phase,
correlation = corGaus(form = ~ day_season | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
# Create the piecewise SEM
psem_model <- piecewiseSEM::psem(
top_HR,
top_BT,
top_ACT)
summary(psem_model)
# Create quadratic terms explicitly in data
summer <- summer %>%
mutate(
phase_mean_CT_sq = phase_mean_CT^2,
day_season_sq = day_season^2,
weight_sq = weight^2,
day_season = as.numeric(day_season),
ID_phase = as.character(ID_phase))
glimpse(summer)
top_HR <- nlme::lme(
fixed = mean_heartrate ~ season_year + phase_mean_CT + phase_mean_CT_sq +
day_season + day_season_sq + weight + mean_activity_percent,
data = summer,
random = ~1 + mean_activity_percent | ID_phase,
correlation = corGaus(form = ~ day_season | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
top_BT <- nlme::lme(
fixed = mean_BT_smooth ~ season_year + phase_mean_CT +
day_season + day_season_sq + mean_activity_percent,
data = summer,
random = ~1 | ID_phase,
correlation = corGaus(form = ~ day_season | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
top_ACT <- nlme::lme(
fixed = mean_activity_percent ~ season_year + phase_mean_CT +
weight + weight_sq,
data = summer,
random = ~1 + phase_mean_CT | ID_phase,
correlation = corGaus(form = ~ day_season | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
# Create the piecewise SEM
psem_model <- piecewiseSEM::psem(
top_HR,
top_BT,
top_ACT)
summary(psem_model)
top_HR <- nlme::lme(
fixed = mean_heartrate ~ season_year + phase_mean_CT + phase_mean_CT_sq +
day_season + day_season_sq + weight + mean_activity_percent,
data = summer,
random = ~1 | ID_phase,
correlation = corGaus(form = ~ day_season | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
top_BT <- nlme::lme(
fixed = mean_BT_smooth ~ season_year + phase_mean_CT +
day_season + day_season_sq + mean_activity_percent,
data = summer,
random = ~1 | ID_phase,
correlation = corGaus(form = ~ day_season | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
top_ACT <- nlme::lme(
fixed = mean_activity_percent ~ season_year + phase_mean_CT +
weight + weight_sq,
data = summer,
random = ~1 | ID_phase,
correlation = corGaus(form = ~ day_season | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
# Create the piecewise SEM
psem_model <- piecewiseSEM::psem(
top_HR,
top_BT,
top_ACT)
summary(psem_model)
# Create quadratic terms explicitly in data
summer <- summer %>%
mutate(
phase_mean_CT_sq = phase_mean_CT^2,
day_season_sq = day_season^2,
weight_sq = weight^2,
day_season = as.numeric(day_season))
glimpse(summer)
top_HR <- nlme::lme(
fixed = mean_heartrate ~ season_year + phase_mean_CT + phase_mean_CT_sq +
day_season + day_season_sq + weight + mean_activity_percent,
data = summer,
random = ~1 + mean_activity_percent | ID_phase,
correlation = corGaus(form = ~ day_season | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
top_BT <- nlme::lme(
fixed = mean_BT_smooth ~ season_year + phase_mean_CT +
day_season + day_season_sq + mean_activity_percent,
data = summer,
random = ~1 | ID_phase,
correlation = corGaus(form = ~ day_season | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
top_ACT <- nlme::lme(
fixed = mean_activity_percent ~ season_year + phase_mean_CT +
weight + weight_sq,
data = summer,
random = ~1 + phase_mean_CT | ID_phase,
correlation = corGaus(form = ~ day_season | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
# Create the piecewise SEM
psem_model <- piecewiseSEM::psem(
top_HR,
top_BT,
top_ACT)
summary(psem_model)
summary(ID_phase)
summary(summer$ID_phase)
table(summer$ID_phase)
top_HR <- nlme::lme(
fixed = mean_heartrate ~ season_year + phase_mean_CT + phase_mean_CT_sq +
day_season + day_season_sq + weight + mean_activity_percent,
data = summer,
random = ~1 + mean_activity_percent | ID,
correlation = corGaus(form = ~ day_season | ID, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
top_BT <- nlme::lme(
fixed = mean_BT_smooth ~ season_year + phase_mean_CT +
day_season + day_season_sq + mean_activity_percent,
data = summer,
random = ~1 | ID,
correlation = corGaus(form = ~ day_season | ID, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
top_ACT <- nlme::lme(
fixed = mean_activity_percent ~ season_year + phase_mean_CT +
weight + weight_sq,
data = summer,
random = ~1 + phase_mean_CT | ID,
correlation = corGaus(form = ~ day_season | ID, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
# Create the piecewise SEM
psem_model <- piecewiseSEM::psem(
top_HR,
top_BT,
top_ACT)
summary(psem_model)

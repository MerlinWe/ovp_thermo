na.action = na.exclude,
control = lmeControl(opt = "optim")
)
summary(top_BT)
summary(top_ACT)
top_HR <- lme(
fixed = mean_heartrate ~ season_year + phase_mean_CT + phase_mean_CT_sq +
day_season + day_season_sq + weight + mean_activity_percent,
data = summer,
random = ~1 + mean_activity_percent | ID_phase,
correlation = best_fixed_model_HR$modelStruct$corStruct,
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
top_BT <- lme(
fixed = mean_BT_smooth ~ season_year + phase_mean_CT +
day_season + day_season_sq + mean_activity_percent,
data = summer,
random = ~1 | ID_phase,
correlation = best_fixed_model_BT$modelStruct$corStruct,
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim")
)
top_ACT <- lme(
fixed = mean_activity_percent ~ season_year + phase_mean_CT +
weight + weight_sq,
data = summer,
random = ~1 + phase_mean_CT | ID_phase,
correlation = best_fixed_model_ACT$modelStruct$corStruct,
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim")
)
# Create the piecewise SEM
psem_model <- psem(
top_HR,
top_BT,
top_ACT)
# **Check model summary**
summary(psem_model)
top_HR <- lme(
fixed = mean_heartrate ~ season_year + phase_mean_CT + phase_mean_CT_sq +
day_season + day_season_sq + weight + mean_activity_percent,
data = summer,
random = ~1 + mean_activity_percent | ID_phase,
correlation = corGaus(form = ~ as.numeric(day_season) | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
top_BT <- lme(
fixed = mean_BT_smooth ~ season_year + phase_mean_CT +
day_season + day_season_sq + mean_activity_percent,
data = summer,
random = ~1 | ID_phase,
correlation = corGaus(form = ~ as.numeric(day_season) | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim")
)
top_ACT <- lme(
fixed = mean_activity_percent ~ season_year + phase_mean_CT +
weight + weight_sq,
data = summer,
random = ~1 + phase_mean_CT | ID_phase,
correlation = corGaus(form = ~ as.numeric(day_season) | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim")
)
# Create the piecewise SEM
psem_model <- psem(
top_HR,
top_BT,
top_ACT)
# **Check model summary**
summary(psem_model)
psem_model_HR <- psem(top_HR)
summary(psem_model_HR)  # Does this run without error?
psem_model_BT <- psem(top_BT)
summary(psem_model_BT)  # Does this run without error?
psem_model_ACT <- psem(top_ACT)
summary(psem_model_ACT)  # Does this run without error?
top_HR <- lme(
fixed = mean_heartrate ~ season_year + phase_mean_CT + phase_mean_CT_sq +
day_season + day_season_sq + weight + mean_activity_percent,
data = summer,
random = ~1 | ID_phase,  # Removed `+ mean_activity_percent`
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim")
)
top_BT <- lme(
fixed = mean_BT_smooth ~ season_year + phase_mean_CT +
day_season + day_season_sq + mean_activity_percent,
data = summer,
random = ~1 | ID_phase,
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim")
)
top_ACT <- lme(
fixed = mean_activity_percent ~ season_year + phase_mean_CT +
weight + weight_sq,
data = summer,
random = ~1 | ID_phase,  # Removed `+ phase_mean_CT`
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim")
)
# Create the piecewise SEM
psem_model <- psem(
top_HR,
top_BT,
top_ACT)
# **Check model summary**
summary(psem_model)
# **Refit mean_heartrate model using `gls()`**
top_HR_gls <- gls(
mean_heartrate ~ season_year + phase_mean_CT + I(phase_mean_CT^2) +
day_season + I(day_season^2) + weight + mean_activity_percent,
data = summer,
method = "ML",
na.action = na.exclude
)
# **Refit mean_BT_smooth model using `gls()`**
top_BT_gls <- gls(
mean_BT_smooth ~ season_year + phase_mean_CT +
day_season + I(day_season^2) + mean_activity_percent,
data = summer,
method = "ML",
na.action = na.exclude
)
# **Refit mean_activity_percent model using `gls()`**
top_ACT_gls <- gls(
mean_activity_percent ~ season_year + phase_mean_CT +
weight + I(weight^2),
data = summer,
method = "ML",
na.action = na.exclude
)
# **Now fit the SEM using `gls()` models**
psem_model_gls <- psem(top_HR_gls, top_BT_gls, top_ACT_gls)
# **Check model summary**
summary(psem_model_gls)
install.packages("brms")  # Install brms if not already installed
install.packages("bayestestR")  # Install bayesian model diagnostics
library(brms)
library(bayestestR)
install.packages("bayestestR")
# Prepare dataset (center and scale all continuous variables)
summer <- summer %>%
mutate(
phase_mean_CT = scale(phase_mean_CT, center = TRUE, scale = TRUE),
phase_mean_CT_sq = phase_mean_CT^2,
day_season = scale(day_season, center = TRUE, scale = TRUE),
day_season_sq = day_season^2,
weight = scale(weight, center = TRUE, scale = TRUE),
weight_sq = weight^2,
mean_activity_percent = scale(mean_activity_percent, center = TRUE, scale = TRUE)
)
library(patchwork)
library(feather)
library(mgcv)
library(car)
library(ggeffects)
library(MASS)
library(emmeans)
library(gamm4)
library(effects)
library(stats)
library(lme4)
library(lmerTest)
library(performance)
library(nlme)
library(piecewiseSEM)
library(tidyverse)
View(psem_model_ACT)
psem_model_BT
summary(psem)
summary(psem_model)
# Prepare dataset (center and scale all continuous variables)
summer <- summer %>%
mutate(
phase_mean_CT = scale(phase_mean_CT, center = TRUE, scale = TRUE),
phase_mean_CT_sq = phase_mean_CT^2,
day_season = scale(day_season, center = TRUE, scale = TRUE),
day_season_sq = day_season^2,
weight = scale(weight, center = TRUE, scale = TRUE),
weight_sq = weight^2,
mean_activity_percent = scale(mean_activity_percent, center = TRUE, scale = TRUE)
)
# Bayesian model for mean_heartrate
bayes_HR <- brm(
mean_heartrate ~ season_year + phase_mean_CT + phase_mean_CT_sq +
day_season + day_season_sq + weight + mean_activity_percent +
(1 + mean_activity_percent | ID_phase),  # Random slope for repeated measures
data = summer,
family = gaussian(),
prior = c(set_prior("normal(0,1)", class = "b")),  # Regularizing prior
chains = 4, cores = 4, iter = 4000, warmup = 1000,
control = list(adapt_delta = 0.95)
)
library(brms)
library(bayestestR)
# Bayesian model for mean_heartrate
bayes_HR <- brm(
mean_heartrate ~ season_year + phase_mean_CT + phase_mean_CT_sq +
day_season + day_season_sq + weight + mean_activity_percent +
(1 + mean_activity_percent | ID_phase),  # Random slope for repeated measures
data = summer,
family = gaussian(),
prior = c(set_prior("normal(0,1)", class = "b")),  # Regularizing prior
chains = 4, cores = 4, iter = 4000, warmup = 1000,
control = list(adapt_delta = 0.95)
)
bayes_BT <- brm(
mean_BT_smooth ~ season_year + phase_mean_CT +
day_season + day_season_sq + mean_activity_percent +
(1 | ID_phase),  # Random intercept
data = summer,
family = gaussian(),
prior = c(set_prior("normal(0,1)", class = "b")),
chains = 4, cores = 4, iter = 4000, warmup = 1000,
control = list(adapt_delta = 0.95)
)
bayes_ACT <- brm(
mean_activity_percent ~ season_year + phase_mean_CT +
weight + weight_sq +
(1 + phase_mean_CT | ID_phase),  # Random slope for repeated measures
data = summer,
family = gaussian(),
prior = c(set_prior("normal(0,1)", class = "b")),
chains = 4, cores = 4, iter = 4000, warmup = 1000,
control = list(adapt_delta = 0.95)
)
bayes_SEM <- bf(mean_heartrate ~ season_year + phase_mean_CT + phase_mean_CT_sq +
day_season + day_season_sq + weight + mean_activity_percent +
(1 + mean_activity_percent | ID_phase)) +
bf(mean_BT_smooth ~ season_year + phase_mean_CT +
day_season + day_season_sq + mean_activity_percent +
(1 | ID_phase)) +
bf(mean_activity_percent ~ season_year + phase_mean_CT +
weight + weight_sq +
(1 + phase_mean_CT | ID_phase))
# Fit the full Bayesian SEM
bayes_model <- brm(
formula = bayes_SEM,
data = summer,
family = gaussian(),
prior = c(set_prior("normal(0,1)", class = "b")),
chains = 4, cores = 4, iter = 4000, warmup = 1000,
control = list(adapt_delta = 0.95)
)
summary(bayes_model)
pp_check(bayes_model)
bayestestR::describe_posterior(bayes_model)
library(DiagrammeR)
# Manually create path diagram
grViz("
digraph BayesianSEM {
node [shape = box, style = filled, fillcolor = lightblue]
Mean_Heartrate -> Mean_BT_Smooth
Mean_Heartrate -> Mean_Activity_Percent
Mean_BT_Smooth -> Mean_Activity_Percent
Phase_Mean_CT -> Mean_Heartrate
Phase_Mean_CT -> Mean_BT_Smooth
Phase_Mean_CT -> Mean_Activity_Percent
Weight -> Mean_Activity_Percent
Day_Season -> Mean_Heartrate
Day_Season -> Mean_BT_Smooth
}
")
# Extract posterior means & 95% credible intervals
coef_df <- as.data.frame(fixef(bayes_model))
coef_df <- coef_df %>%
mutate(Variable = rownames(coef_df)) %>%
select(Variable, Estimate = Estimate, Lower = Q2.5, Upper = Q97.5)
# Print extracted coefficients
print(coef_df)
# Generate dynamic diagram
grViz("
digraph BayesianSEM {
node [shape = box, style = filled, fillcolor = lightblue]
Mean_Heartrate -> Mean_BT_Smooth [label = '@@1']
Mean_Heartrate -> Mean_Activity_Percent [label = '@@2']
Mean_BT_Smooth -> Mean_Activity_Percent [label = '@@3']
Phase_Mean_CT -> Mean_Heartrate [label = '@@4']
Phase_Mean_CT -> Mean_BT_Smooth [label = '@@5']
Phase_Mean_CT -> Mean_Activity_Percent [label = '@@6']
Weight -> Mean_Activity_Percent [label = '@@7']
Day_Season -> Mean_Heartrate [label = '@@8']
Day_Season -> Mean_BT_Smooth [label = '@@9']
}
[1]: '", round(coef_df$Estimate[coef_df$Variable == "meanheartrate_mean_BT_smooth"], 2), "'
[2]: '", round(coef_df$Estimate[coef_df$Variable == "meanheartrate_mean_activity_percent"], 2), "'
[3]: '", round(coef_df$Estimate[coef_df$Variable == "meanBTsmooth_mean_activity_percent"], 2), "'
[4]: '", round(coef_df$Estimate[coef_df$Variable == "meanheartrate_phase_mean_CT"], 2), "'
[5]: '", round(coef_df$Estimate[coef_df$Variable == "meanBTsmooth_phase_mean_CT"], 2), "'
[6]: '", round(coef_df$Estimate[coef_df$Variable == "meanactivitypercent_phase_mean_CT"], 2), "'
[7]: '", round(coef_df$Estimate[coef_df$Variable == "meanactivitypercent_weight"], 2), "'
[8]: '", round(coef_df$Estimate[coef_df$Variable == "meanheartrate_day_season"], 2), "'
[9]: '", round(coef_df$Estimate[coef_df$Variable == "meanBTsmooth_day_season"], 2), "'
")
coef_df <- as.data.frame(fixef(bayes_model))
coef_df <- coef_df %>%
mutate(Variable = rownames(coef_df)) %>%
select(Variable, Estimate = Estimate)
# Store values in a named list for substitution
coef_values <- list(
HR_BT = round(coef_df$Estimate[coef_df$Variable == "meanheartrate_mean_BT_smooth"], 2),
HR_ACT = round(coef_df$Estimate[coef_df$Variable == "meanheartrate_mean_activity_percent"], 2),
BT_ACT = round(coef_df$Estimate[coef_df$Variable == "meanBTsmooth_mean_activity_percent"], 2),
PHASE_HR = round(coef_df$Estimate[coef_df$Variable == "meanheartrate_phase_mean_CT"], 2),
PHASE_BT = round(coef_df$Estimate[coef_df$Variable == "meanBTsmooth_phase_mean_CT"], 2),
PHASE_ACT = round(coef_df$Estimate[coef_df$Variable == "meanactivitypercent_phase_mean_CT"], 2),
WEIGHT_ACT = round(coef_df$Estimate[coef_df$Variable == "meanactivitypercent_weight"], 2),
DAY_HR = round(coef_df$Estimate[coef_df$Variable == "meanheartrate_day_season"], 2),
DAY_BT = round(coef_df$Estimate[coef_df$Variable == "meanBTsmooth_day_season"], 2)
)
# Replace missing coefficients with default values (optional)
coef_values <- lapply(coef_values, function(x) ifelse(is.na(x), "NA", x))
grViz(sprintf("
digraph BayesianSEM {
node [shape = box, style = filled, fillcolor = lightblue]
Mean_Heartrate -> Mean_BT_Smooth [label = '%s']
Mean_Heartrate -> Mean_Activity_Percent [label = '%s']
Mean_BT_Smooth -> Mean_Activity_Percent [label = '%s']
Phase_Mean_CT -> Mean_Heartrate [label = '%s']
Phase_Mean_CT -> Mean_BT_Smooth [label = '%s']
Phase_Mean_CT -> Mean_Activity_Percent [label = '%s']
Weight -> Mean_Activity_Percent [label = '%s']
Day_Season -> Mean_Heartrate [label = '%s']
Day_Season -> Mean_BT_Smooth [label = '%s']
}
",
coef_values$HR_BT,
coef_values$HR_ACT,
coef_values$BT_ACT,
coef_values$PHASE_HR,
coef_values$PHASE_BT,
coef_values$PHASE_ACT,
coef_values$WEIGHT_ACT,
coef_values$DAY_HR,
coef_values$DAY_BT
))
grViz(sprintf("
digraph BayesianSEM {
node [shape = box, style = filled, fillcolor = lightblue]
Mean_Heartrate -> Mean_BT_Smooth [label = '%s']
Mean_Heartrate -> Mean_Activity_Percent [label = '%s']
Mean_BT_Smooth -> Mean_Activity_Percent [label = '%s']
Phase_Mean_CT -> Mean_Heartrate [label = '%s']
Phase_Mean_CT -> Mean_BT_Smooth [label = '%s']
Phase_Mean_CT -> Mean_Activity_Percent [label = '%s']
Weight -> Mean_Activity_Percent [label = '%s']
Day_Season -> Mean_Heartrate [label = '%s']
Day_Season -> Mean_BT_Smooth [label = '%s']
}
",
coef_values$HR_BT,
coef_values$HR_ACT,
coef_values$BT_ACT,
coef_values$PHASE_HR,
coef_values$PHASE_BT,
coef_values$PHASE_ACT,
coef_values$WEIGHT_ACT,
coef_values$DAY_HR,
coef_values$DAY_BT
))
View(coef_values)
coef_values[["HR_ACT"]]
coef_values$HR_BT
coef_values$HR_ACT
# Extract posterior means & 95% credible intervals
coef_df <- as.data.frame(fixef(bayes_model))
coef_df <- coef_df %>%
mutate(Variable = rownames(coef_df)) %>%
select(Variable, Estimate = Estimate)
# Store values in a named list for substitution
coef_values <- list(
HR_BT = round(coef_df$Estimate[coef_df$Variable == "meanheartrate_mean_BT_smooth"], 2),
HR_ACT = round(coef_df$Estimate[coef_df$Variable == "meanheartrate_mean_activity_percent"], 2),
BT_ACT = round(coef_df$Estimate[coef_df$Variable == "meanBTsmooth_mean_activity_percent"], 2),
PHASE_HR = round(coef_df$Estimate[coef_df$Variable == "meanheartrate_phase_mean_CT"], 2),
PHASE_BT = round(coef_df$Estimate[coef_df$Variable == "meanBTsmooth_phase_mean_CT"], 2),
PHASE_ACT = round(coef_df$Estimate[coef_df$Variable == "meanactivitypercent_phase_mean_CT"], 2),
WEIGHT_ACT = round(coef_df$Estimate[coef_df$Variable == "meanactivitypercent_weight"], 2),
DAY_HR = round(coef_df$Estimate[coef_df$Variable == "meanheartrate_day_season"], 2),
DAY_BT = round(coef_df$Estimate[coef_df$Variable == "meanBTsmooth_day_season"], 2)
)
# Replace missing coefficients with default values (optional)
coef_values <- lapply(coef_values, function(x) ifelse(is.na(x), "NA", x))
library(DiagrammeR)
grViz(sprintf("
digraph BayesianSEM {
node [shape = box, style = filled, fillcolor = lightblue]
Mean_Heartrate -> Mean_BT_Smooth [label = '%s']
Mean_Heartrate -> Mean_Activity_Percent [label = '%s']
Mean_BT_Smooth -> Mean_Activity_Percent [label = '%s']
Phase_Mean_CT -> Mean_Heartrate [label = '%s']
Phase_Mean_CT -> Mean_BT_Smooth [label = '%s']
Phase_Mean_CT -> Mean_Activity_Percent [label = '%s']
Weight -> Mean_Activity_Percent [label = '%s']
Day_Season -> Mean_Heartrate [label = '%s']
Day_Season -> Mean_BT_Smooth [label = '%s']
}
",
coef_values$HR_BT,
coef_values$HR_ACT,
coef_values$BT_ACT,
coef_values$PHASE_HR,
coef_values$PHASE_BT,
coef_values$PHASE_ACT,
coef_values$WEIGHT_ACT,
coef_values$DAY_HR,
coef_values$DAY_BT
))
library(rsvg)
install.packages("rsvg")
library(rsvg)
grViz(sprintf("
digraph BayesianSEM {
node [shape = box, style = filled, fillcolor = lightblue]
Mean_Heartrate -> Mean_BT_Smooth [label = '%s']
Mean_Heartrate -> Mean_Activity_Percent [label = '%s']
Mean_BT_Smooth -> Mean_Activity_Percent [label = '%s']
Phase_Mean_CT -> Mean_Heartrate [label = '%s']
Phase_Mean_CT -> Mean_BT_Smooth [label = '%s']
Phase_Mean_CT -> Mean_Activity_Percent [label = '%s']
Weight -> Mean_Activity_Percent [label = '%s']
Day_Season -> Mean_Heartrate [label = '%s']
Day_Season -> Mean_BT_Smooth [label = '%s']
}
",
coef_values$HR_BT,
coef_values$HR_ACT,
coef_values$BT_ACT,
coef_values$PHASE_HR,
coef_values$PHASE_BT,
coef_values$PHASE_ACT,
coef_values$WEIGHT_ACT,
coef_values$DAY_HR,
coef_values$DAY_BT
))
# Save as SVG
grViz_output <- grViz(sprintf("
digraph BayesianSEM {
node [shape = box, style = filled, fillcolor = lightblue]
Mean_Heartrate -> Mean_BT_Smooth [label = '%s']
Mean_Heartrate -> Mean_Activity_Percent [label = '%s']
Mean_BT_Smooth -> Mean_Activity_Percent [label = '%s']
Phase_Mean_CT -> Mean_Heartrate [label = '%s']
Phase_Mean_CT -> Mean_BT_Smooth [label = '%s']
Phase_Mean_CT -> Mean_Activity_Percent [label = '%s']
Weight -> Mean_Activity_Percent [label = '%s']
Day_Season -> Mean_Heartrate [label = '%s']
Day_Season -> Mean_BT_Smooth [label = '%s']
}
",
coef_values$HR_BT,
coef_values$HR_ACT,
coef_values$BT_ACT,
coef_values$PHASE_HR,
coef_values$PHASE_BT,
coef_values$PHASE_ACT,
coef_values$WEIGHT_ACT,
coef_values$DAY_HR,
coef_values$DAY_BT
))
# Convert to SVG and save
grViz_output %>%
export_svg() %>%
charToRaw() %>%
rsvg_pdf("BayesianSEM.pdf")
grViz_output <- grViz(sprintf("
digraph BayesianSEM {
node [shape = box, style = filled, fillcolor = lightblue]
Mean_Heartrate -> Mean_BT_Smooth [label = '%s']
Mean_Heartrate -> Mean_Activity_Percent [label = '%s']
Mean_BT_Smooth -> Mean_Activity_Percent [label = '%s']
Phase_Mean_CT -> Mean_Heartrate [label = '%s']
Phase_Mean_CT -> Mean_BT_Smooth [label = '%s']
Phase_Mean_CT -> Mean_Activity_Percent [label = '%s']
Weight -> Mean_Activity_Percent [label = '%s']
Day_Season -> Mean_Heartrate [label = '%s']
Day_Season -> Mean_BT_Smooth [label = '%s']
}
",
coef_values$HR_BT,
coef_values$HR_ACT,
coef_values$BT_ACT,
coef_values$PHASE_HR,
coef_values$PHASE_BT,
coef_values$PHASE_ACT,
coef_values$WEIGHT_ACT,
coef_values$DAY_HR,
coef_values$DAY_BT
))
# Open in external window
print(grViz_output)
render_graph(grViz_output)
# Convert to SVG and save
grViz_output %>%
# export_svg() %>%
# charToRaw() %>%
rsvg_pdf("BayesianSEM.pdf")
# Convert to SVG and save
grViz_output %>%
export_svg() %>%
charToRaw() %>%
rsvg_pdf("BayesianSEM.pdf")

divergence_by_env %>%
mutate(
standage_mid = as.numeric(gsub("\\[|\\)|\\]", "", standage_bin)) + 5,  # Midpoint of 10-year bin
variable = recode(variable,
elevation = "Elevation",
rain_pc = "Precipitation (PC)",
soil_pc = "Soil - Water Retention (PC)",
soil_ph = "Soil pH",
temp_pc = "Temperature (PC)"),
trait = recode(trait,
bark_thickness = "Bark Thickness",
conduit_diam = "Conduit Diameter",
height = "Tree Height",
leaf_n = "Leaf Nitrogen",
seed_dry_mass = "Seed Dry Mass",
shade_tolerance = "Shade Tolerance",
specific_leaf_area = "Specific Leaf Area",
wood_density = "Wood Density")
) %>%
ggplot(divergence_by_env, aes(x = standage_mid, y = mse_diff, color = variable)) +
geom_line(size = 1) +
facet_wrap(~trait, scales = "free_y") +
scale_color_viridis_d(name = "Environmental Variable") +
labs(
x = "Stand Age (Years)",
y = expression(paste("Predictive Divergence (", Delta, "MSE)"))
) +
theme_bw() +
theme(
text = element_text(size = 10),
strip.text = element_text(face = "bold"),
legend.position = "top"
)
divergence_by_env %>%
mutate(
standage_mid = as.numeric(gsub("\\[|\\)|\\]", "", standage_bin)) + 5,  # Midpoint of 10-year bin
variable = recode(variable,
elevation = "Elevation",
rain_pc = "Precipitation (PC)",
soil_pc = "Soil - Water Retention (PC)",
soil_ph = "Soil pH",
temp_pc = "Temperature (PC)"),
trait = recode(trait,
bark_thickness = "Bark Thickness",
conduit_diam = "Conduit Diameter",
height = "Tree Height",
leaf_n = "Leaf Nitrogen",
seed_dry_mass = "Seed Dry Mass",
shade_tolerance = "Shade Tolerance",
specific_leaf_area = "Specific Leaf Area",
wood_density = "Wood Density")
)
divergence_by_env %>%
mutate(
env_group = recode(env_group,
high = "High pH",
low = "Low pH"),
trait = recode(trait,
bark_thickness = "Bark Thickness",
conduit_diam = "Conduit Diameter",
height = "Tree Height",
leaf_n = "Leaf Nitrogen",
seed_dry_mass = "Seed Dry Mass",
shade_tolerance = "Shade Tolerance",
specific_leaf_area = "Specific Leaf Area",
wood_density = "Wood Density"),
# Extract numeric midpoints from standage_bin
standage_mid = as.numeric(str_extract(standage_bin, "(?<=\\[)\\d+")) + 5
) %>%
ggplot(divergence_by_env, aes(x = standage_mid, y = mse_diff, color = variable)) +
geom_line(size = 1) +
facet_wrap(~trait, scales = "free_y") +
scale_color_viridis_d(name = "Environmental Variable") +
labs(
x = "Stand Age (Years)",
y = expression(paste("Predictive Divergence (", Delta, "MSE)"))
) +
theme_bw() +
theme(
text = element_text(size = 10),
strip.text = element_text(face = "bold"),
legend.position = "top"
)
divergence_by_env %>%
mutate(
trait = recode(trait,
bark_thickness = "Bark Thickness",
conduit_diam = "Conduit Diameter",
height = "Tree Height",
leaf_n = "Leaf Nitrogen",
seed_dry_mass = "Seed Dry Mass",
shade_tolerance = "Shade Tolerance",
specific_leaf_area = "Specific Leaf Area",
wood_density = "Wood Density"),
# Extract numeric midpoints from standage_bin
standage_mid = as.numeric(str_extract(standage_bin, "(?<=\\[)\\d+")) + 5
) %>%
ggplot(divergence_by_env, aes(x = standage_mid, y = mse_diff, color = variable)) +
geom_line(size = 1) +
facet_wrap(~trait, scales = "free_y") +
scale_color_viridis_d(name = "Environmental Variable") +
labs(
x = "Stand Age (Years)",
y = expression(paste("Predictive Divergence (", Delta, "MSE)"))
) +
theme_bw() +
theme(
text = element_text(size = 10),
strip.text = element_text(face = "bold"),
legend.position = "top"
)
divergence_by_env %>%
mutate(
trait = recode(trait,
bark_thickness = "Bark Thickness",
conduit_diam = "Conduit Diameter",
height = "Tree Height",
leaf_n = "Leaf Nitrogen",
seed_dry_mass = "Seed Dry Mass",
shade_tolerance = "Shade Tolerance",
specific_leaf_area = "Specific Leaf Area",
wood_density = "Wood Density"),
# Extract numeric midpoints from standage_bin
standage_mid = as.numeric(str_extract(standage_bin, "(?<=\\[)\\d+")) + 5
) %>%
ggplot(aes(x = standage_mid, y = mse_diff, color = variable)) +
geom_line(size = 1) +
facet_wrap(~trait, scales = "free_y") +
scale_color_viridis_d(name = "Environmental Variable") +
labs(
x = "Stand Age (Years)",
y = expression(paste("Predictive Divergence (", Delta, "MSE)"))
) +
theme_bw() +
theme(
text = element_text(size = 10),
strip.text = element_text(face = "bold"),
legend.position = "top"
)
top_env_per_trait <- divergence_by_env %>%
mutate(
trait = recode(trait,
bark_thickness = "Bark Thickness",
conduit_diam = "Conduit Diameter",
height = "Tree Height",
leaf_n = "Leaf Nitrogen",
seed_dry_mass = "Seed Dry Mass",
shade_tolerance = "Shade Tolerance",
specific_leaf_area = "Specific Leaf Area",
wood_density = "Wood Density"),
# Extract numeric midpoints from standage_bin
standage_mid = as.numeric(str_extract(standage_bin, "(?<=\\[)\\d+")) + 5
) %>%
group_by(trait, variable) %>%
summarise(avg_div = mean(mse_diff, na.rm = TRUE), .groups = "drop") %>%
group_by(trait) %>%
slice_max(avg_div, n = 1)
# Filter main data to just top variables
filtered_data <- divergence_by_env %>%
semi_join(top_env_per_trait, by = c("trait", "variable"))
View(filtered_data)
View(top_env_per_trait)
avg_divergence <- divergence_by_env %>%
group_by(trait, standage_mid) %>%
summarise(mean_diff = mean(mse_diff, na.rm = TRUE), .groups = "drop")
divergence_by_env <- standage_mse %>%
filter(env_group %in% c("high", "low")) %>%
# Compute average MSE per variable, trait, standage_bin, and env_group
group_by(variable, trait, standage_bin, env_group) %>%
summarise(mean_mse = mean(mse, na.rm = TRUE), .groups = "drop") %>%
# Pivot to wide format to get both high and low MSE in same row
pivot_wider(names_from = env_group, values_from = mean_mse, names_prefix = "mse_") %>%
# Compute absolute difference and mid standage
mutate(mse_diff = abs(mse_high - mse_low),
standage_mid = as.numeric(str_extract(standage_bin, "(?<=\\[)\\d+")) + 5)
divergence_by_env %>%
# Now average across traits and bins to rank variables
group_by(variable) %>%
summarise(mean_mse_divergence = mean(mse_diff, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = reorder(variable, mean_mse_divergence),
y = mean_mse_divergence)) +
geom_col(fill = "grey50", colour = "black", alpha = .7) +
coord_flip() +
labs(x = "Environmental Variable",
y = "Mean Predictability Divergence (Δ MSE)") +
theme_classic()
# Summarise MSE by standage bin and environmental group
divergence_by_env <- standage_mse %>%
filter(env_group %in% c("high", "low")) %>%
# Compute average MSE per variable, trait, standage_bin, and env_group
group_by(variable, trait, standage_bin, env_group) %>%
summarise(mean_mse = mean(mse, na.rm = TRUE), .groups = "drop") %>%
# Pivot to wide format to get both high and low MSE in same row
pivot_wider(names_from = env_group, values_from = mean_mse, names_prefix = "mse_") %>%
# Compute absolute difference and mid standage
mutate(mse_diff = abs(mse_high - mse_low),
standage_mid = as.numeric(str_extract(standage_bin, "(?<=\\[)\\d+")) + 5,
env_group = recode(env_group,
high = "High Temp",
low = "Low Temp"),
trait = recode(trait,
bark_thickness = "Bark Thickness",
conduit_diam = "Conduit Diameter",
height = "Tree Height",
leaf_n = "Leaf Nitrogen",
seed_dry_mass = "Seed Dry Mass",
shade_tolerance = "Shade Tolerance",
specific_leaf_area = "Specific Leaf Area",
wood_density = "Wood Density"))
# Summarise MSE by standage bin and environmental group
divergence_by_env <- standage_mse %>%
filter(env_group %in% c("high", "low")) %>%
# Compute average MSE per variable, trait, standage_bin, and env_group
group_by(variable, trait, standage_bin, env_group) %>%
summarise(mean_mse = mean(mse, na.rm = TRUE), .groups = "drop") %>%
# Pivot to wide format to get both high and low MSE in same row
pivot_wider(names_from = env_group, values_from = mean_mse, names_prefix = "mse_") %>%
# Compute absolute difference and mid standage
mutate(mse_diff = abs(mse_high - mse_low),
standage_mid = as.numeric(str_extract(standage_bin, "(?<=\\[)\\d+")) + 5,
trait = recode(trait,
bark_thickness = "Bark Thickness",
conduit_diam = "Conduit Diameter",
height = "Tree Height",
leaf_n = "Leaf Nitrogen",
seed_dry_mass = "Seed Dry Mass",
shade_tolerance = "Shade Tolerance",
specific_leaf_area = "Specific Leaf Area",
wood_density = "Wood Density"))
# Rank divergence
divergence_by_env %>%
# Now average across traits and bins to rank variables
group_by(variable) %>%
summarise(mean_mse_divergence = mean(mse_diff, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = reorder(variable, mean_mse_divergence),
y = mean_mse_divergence)) +
geom_col(fill = "grey50", colour = "black", alpha = .7) +
coord_flip() +
labs(x = "Environmental Variable",
y = "Mean Predictability Divergence (Δ MSE)") +
theme_classic()
standage_mse %>%
filter(variable %in% c("temp_pc", "Temperature (PC)")) %>%
mutate(
env_group = recode(env_group,
high = "High Temp",
low = "Low Temp"),
trait = recode(trait,
bark_thickness = "Bark Thickness",
conduit_diam = "Conduit Diameter",
height = "Tree Height",
leaf_n = "Leaf Nitrogen",
seed_dry_mass = "Seed Dry Mass",
shade_tolerance = "Shade Tolerance",
specific_leaf_area = "Specific Leaf Area",
wood_density = "Wood Density"),
# Extract numeric midpoints from standage_bin
standage_mid = as.numeric(str_extract(standage_bin, "(?<=\\[)\\d+")) + 5
) %>%
ggplot(aes(x = standage_mid, y = mse, color = env_group)) +
geom_line(linewidth = 0.8) +
facet_wrap(~trait, scales = "free_y", ncol = 4, nrow = 2) +
scale_color_manual(values = c("High Temp" = "red", "Low Temp" = "blue")) +
labs(x = "Stand Age (Years)", y = "Mean MSE", color = NULL) +
theme_bw() +
theme(
text = element_text(size = 10),
strip.text = element_text(face = "bold"),
legend.position = "top"
)
standage_mse %>%
filter(variable %in% c("temp_pc", "Temperature (PC)")) %>%
mutate(
env_group = recode(env_group,
high = "High Temp",
low = "Low Temp")) %>%
ggplot(aes(x = standage_mid, y = mse, color = env_group)) +
geom_line(linewidth = 0.8) +
facet_wrap(~trait, scales = "free_y", ncol = 4, nrow = 2) +
scale_color_manual(values = c("High Temp" = "red", "Low Temp" = "blue")) +
labs(x = "Stand Age (Years)", y = "Mean MSE", color = NULL) +
theme_bw() +
theme(
text = element_text(size = 10),
strip.text = element_text(face = "bold"),
legend.position = "top")
# Summarise MSE by standage bin and environmental group
divergence_by_env <- standage_mse %>%
filter(env_group %in% c("high", "low")) %>%
# Compute average MSE per variable, trait, standage_bin, and env_group
group_by(variable, trait, standage_bin, env_group) %>%
summarise(mean_mse = mean(mse, na.rm = TRUE), .groups = "drop") %>%
# Pivot to wide format to get both high and low MSE in same row
pivot_wider(names_from = env_group, values_from = mean_mse, names_prefix = "mse_") %>%
# Compute absolute difference and mid standage
mutate(mse_diff = abs(mse_high - mse_low),
standage_mid = as.numeric(str_extract(standage_bin, "(?<=\\[)\\d+")) + 5,
trait = recode(trait,
bark_thickness = "Bark Thickness",
conduit_diam = "Conduit Diameter",
height = "Tree Height",
leaf_n = "Leaf Nitrogen",
seed_dry_mass = "Seed Dry Mass",
shade_tolerance = "Shade Tolerance",
specific_leaf_area = "Specific Leaf Area",
wood_density = "Wood Density"))
divergence_by_env %>%
filter(variable %in% c("temp_pc", "Temperature (PC)")) %>%
mutate(
env_group = recode(env_group,
high = "High Temp",
low = "Low Temp")) %>%
ggplot(aes(x = standage_mid, y = mse, color = env_group)) +
geom_line(linewidth = 0.8) +
facet_wrap(~trait, scales = "free_y", ncol = 4, nrow = 2) +
scale_color_manual(values = c("High Temp" = "red", "Low Temp" = "blue")) +
labs(x = "Stand Age (Years)", y = "Mean MSE", color = NULL) +
theme_bw() +
theme(
text = element_text(size = 10),
strip.text = element_text(face = "bold"),
legend.position = "top")
View(divergence_by_env)
rm(filtered_data)
View(standage_mse)
# Rank divergence
standage_mse %>%
# Now average across traits and bins to rank variables
group_by(variable) %>%
summarise(mean_mse_divergence = mean(mse_diff, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = reorder(variable, mean_mse_divergence),
y = mean_mse_divergence)) +
geom_col(fill = "grey50", colour = "black", alpha = .7) +
coord_flip() +
labs(x = "Environmental Variable",
y = "Mean Predictability Divergence (Δ MSE)") +
theme_classic()
# Rank divergence
standage_mse %>%
# Now average across traits and bins to rank variables
group_by(variable) %>%
summarise(mean_mse_divergence = mean(mse_diff, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = reorder(variable, mean_mse_divergence),
y = mean_mse_divergence)) +
geom_col(fill = "grey50", colour = "black", alpha = .7) +
coord_flip() +
labs(x = "Environmental Variable",
y = "Mean Predictability Divergence (Δ MSE)") +
theme_classic()
# Rank divergence
divergence_by_env %>%
# Now average across traits and bins to rank variables
group_by(variable) %>%
summarise(mean_mse_divergence = mean(mse_diff, na.rm = TRUE), .groups = "drop") %>%
ggplot(aes(x = reorder(variable, mean_mse_divergence),
y = mean_mse_divergence)) +
geom_col(fill = "grey50", colour = "black", alpha = .7) +
coord_flip() +
labs(x = "Environmental Variable",
y = "Mean Predictability Divergence (Δ MSE)") +
theme_classic()
top_env_per_trait <- divergence_by_env %>%
group_by(trait, variable) %>%
summarise(avg_div = mean(mse_diff, na.rm = TRUE), .groups = "drop") %>%
group_by(trait) %>%
slice_max(avg_div, n = 1)
divergence_by_env %>%
group_by(trait, variable) %>%
summarise(avg_div = mean(mse_diff, na.rm = TRUE), .groups = "drop") %>%
group_by(trait) %>%
slice_max(avg_div, n = 1)
# Set WD and get source code functions
setwd("/Users/serpent/Documents/VHL/OVP/Data/ovp_data_26_03_25.csv")
# Read data
dat <- read_csv("/Users/serpent/Documents/VHL/OVP/Data/ovp_data_26_03_25.csv")
##################################################################################
############################ OVP analysis: summer day ############################
##################################################################################
rm(list = ls()); gc() # make sure environment is clean
export = TRUE # Export?
# Activate package libraries
library(patchwork)
library(feather)
library(mgcv)
library(car)
library(ggeffects)
library(MASS)
library(emmeans)
library(gamm4)
library(effects)
library(stats)
library(lme4)
library(lmerTest)
library(performance)
library(nlme)
library(piecewiseSEM)
library(tidyverse)
# Read data
dat <- read_csv("/Users/serpent/Documents/VHL/OVP/Data/ovp_data_26_03_25.csv")
# Get summer day subset
summer <- dat %>% prep_ovp("Summer", "day") # ok
#setwd("/Users/serpent/Documents/VHL/OVP/Code/Analysis")
source(url("https://raw.githubusercontent.com/MerlinWe/ovp_thermo/main/Analysis/SEM_(MWE)/functions.R"))
##################################################################################
############################ OVP analysis: summer day ############################
##################################################################################
rm(list = ls()); gc() # make sure environment is clean
export = TRUE # Export?
# Activate package libraries
library(patchwork)
library(feather)
library(mgcv)
library(car)
library(ggeffects)
library(MASS)
library(emmeans)
library(gamm4)
library(effects)
library(stats)
library(lme4)
library(lmerTest)
library(performance)
library(nlme)
library(piecewiseSEM)
library(tidyverse)
# Set WD and get source code functions
setwd("/Users/serpent/Documents/VHL/OVP/Code/Analysis")
source('/Users/serpent/Documents/VHL/OVP/Code/Analysis/SEM_(MWE)/functions.R')
# Read data
dat <- read_csv("/Users/serpent/Documents/VHL/OVP/Data/ovp_data_26_03_25.csv")
# Get summer day subset
summer <- dat %>% prep_ovp("Summer", "day") # ok
top_HR <- nlme::lme(
fixed = mean_heartrate ~ season_year+phase_mean_THI +
day_season + day_season_sq  + weight+ mean_activity_percent ,
data = summer,
random = ~1 + mean_activity_percent | ID_phase,
correlation = corGaus(form = ~ day_season | ID_phase, nugget = TRUE),
method = "ML" )
# Create quadratic terms explicitly in data
summer <- summer %>%
mutate(
phase_mean_THI_sq = phase_mean_THI^2,
day_season_sq = day_season^2,
day_season = as.numeric(day_season),
ID_phase = as.character(ID_phase),
season_year= as.character(season_year))
# Refit top models using the transformed quadratic terms
top_HR <- nlme::lme(
fixed = mean_heartrate ~ season_year+phase_mean_THI +
day_season + day_season_sq  + weight+ mean_activity_percent ,
data = summer,
random = ~1 + mean_activity_percent | ID_phase,
correlation = corGaus(form = ~ day_season | ID_phase, nugget = TRUE),
method = "ML" )
# Refit top models using the transformed quadratic terms
top_HR <- nlme::lme(
fixed = mean_heartrate ~ phase_mean_THI +
day_season + mean_activity_percent,
data = summer,
random = ~1 + mean_activity_percent | ID_phase,
correlation = corGaus(form = ~ day_season | ID_phase, nugget = TRUE),
method = "ML" )
top_BT <- nlme::lme(
fixed = mean_BT_smooth ~ season_year + phase_mean_THI + phase_mean_THI_sq+
day_season + day_season_sq + mean_activity_percent,
data = summer,
random = ~1 | ID_phase,
correlation = corGaus(form = ~ day_season | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
summary(top_BT)
AIC(top_BT) #-566.6704
step_modelBT <- stepAIC(top_BT, scope = list(lower = ~ phase_mean_THI + mean_activity_percent, upper = ~ .),
direction = "both")
summary(step_modelBT) #phase_mean_THI_sq and season_year are removed
AIC(step_modelBT) #-568.3372
top_BT<- step_modelBT
top_ACT <- nlme::lme(
fixed = mean_activity_percent ~ season_year+phase_mean_THI + weight+ prev_phase_mean_THI,
data = summer,
random = ~1 + phase_mean_THI | ID_phase,
correlation = corGaus(form = ~ day_season | ID_phase, nugget = TRUE),
method = "ML",
na.action = na.exclude,
control = lmeControl(opt = "optim"))
summary(top_ACT)
step_modelACT <- stepAIC(top_ACT, scope = list(lower = ~ phase_mean_THI, upper = ~ .),
direction = "both")
summary(step_modelACT) #weight is verwijderd
top_ACT<-step_modelACT
# Create the piecewise SEM
psem_model <- piecewiseSEM::psem(
top_HR,
top_BT,
top_ACT)
summary(psem_model)
summary(top_ACT)
summary(top_BT)
# Create the piecewise SEM
psem_model <- piecewiseSEM::psem(
top_HR,
#top_BT,
top_ACT)
summary(psem_model)
# Create the piecewise SEM
psem_model <- piecewiseSEM::psem(
#top_HR,
top_BT,
top_ACT)
summary(psem_model)

mutate_if(is.numeric, ~ .*9.81) # convert to m/s² (gravitational force)
rm(dc, dc_01, dc_02, mydir, myfiles)
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_001/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_01 <- ldply(myfiles, read_csv)
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_002/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_02 <- ldply(myfiles, read_csv)
dc <- bind_rows(dc_01, dc_02) %>% select(-prop_Position, -prop_Behaviour, timestamp, -resolution, -samplerate, -scale)
dc_behaviour <- dc %>% select(-Position) %>% na.omit()
dc <- dc_behaviour %>%
mutate(Behaviour = ifelse(grepl("f", Behaviour), "Foraging",
ifelse(grepl("F", Behaviour), "Foraging",
ifelse(grepl("Re", Behaviour), "Resting",
ifelse(grepl("rre", Behaviour), "Resting",
ifelse(grepl("Ru", Behaviour), "Ruminating", NA)))))) %>%
na.omit() %>%
mutate_if(is.numeric, ~ .*9.81) # convert to m/s² (gravitational force)
rm(dc, dc_01, dc_02, mydir, myfiles, dat)
View(dc_behaviour)
View(dc_behaviour)
# ========== ACC data (labelled) ==========
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_001/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_01 <- ldply(myfiles, read_csv)
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_002/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_02 <- ldply(myfiles, read_csv)
dc <- bind_rows(dc_01, dc_02) %>% select(-prop_Position, -prop_Behaviour, timestamp, -resolution, -samplerate, -scale)
dc_behaviour <- dc %>% select(-Position) %>% na.omit()
dc <- dc_behaviour %>%
mutate(Behaviour = ifelse(grepl("f", Behaviour), "Foraging",
ifelse(grepl("F", Behaviour), "Foraging",
ifelse(grepl("Re", Behaviour), "Resting",
ifelse(grepl("rre", Behaviour), "Resting",
ifelse(grepl("Ru", Behaviour), "Ruminating", NA)))))) %>%
na.omit() %>%
mutate_if(is.numeric, ~ .*9.81) %>% # convert to m/s² (gravitational force)
mutate(timestamp = as.POSIXct(timestamp, origin = "1970-01-01"))
rm(dc, dc_01, dc_02, mydir, myfiles, dat)
View(dc_behaviour)
View(dc_behaviour)
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_001/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_01 <- ldply(myfiles, read_csv)
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_002/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_02 <- ldply(myfiles, read_csv)
dc <- bind_rows(dc_01, dc_02) %>% select(-prop_Position, -prop_Behaviour, timestamp, -resolution, -samplerate, -scale)
dc_behaviour <- dc %>% select(-Position) %>% na.omit()
dc <- dc_behaviour %>%
mutate(Behaviour = ifelse(grepl("f", Behaviour), "Foraging",
ifelse(grepl("F", Behaviour), "Foraging",
ifelse(grepl("Re", Behaviour), "Resting",
ifelse(grepl("rre", Behaviour), "Resting",
ifelse(grepl("Ru", Behaviour), "Ruminating", NA)))))) %>%
na.omit() %>%
mutate_if(is.numeric, ~ .*9.81) %>% # convert to m/s² (gravitational force)
mutate(timestamp = as.POSIXct(timestamp, origin = "1970-01-01"))
rm(dc_behaviour, dc_01, dc_02, mydir, myfiles)
View(dc)
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_001/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_01 <- ldply(myfiles, read_csv)
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_002/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_02 <- ldply(myfiles, read_csv)
dc <- bind_rows(dc_01, dc_02) %>% select(-prop_Position, -prop_Behaviour, timestamp, -resolution, -samplerate, -scale)
dc_behaviour <- dc %>% select(-Position) %>% na.omit()
dc <- dc_behaviour %>%
mutate(Behaviour = ifelse(grepl("f", Behaviour), "Foraging",
ifelse(grepl("F", Behaviour), "Foraging",
ifelse(grepl("Re", Behaviour), "Resting",
ifelse(grepl("rre", Behaviour), "Resting",
ifelse(grepl("Ru", Behaviour), "Ruminating", NA)))))) %>%
na.omit() %>%
mutate_if(is.numeric, ~ .*9.81) # convert to m/s² (gravitational force)
dc$timestamp <- as.POSIXct(dc$timestamp, origin = "1970-01-01")
View(dc)
View(dc)
dc_01$timestamp <- as.POSIXct(dc_01$timestamp, origin = "1970-01-01")
View(dc_01)
dc_02$timestamp <- as.POSIXct(dc_02$timestamp, origin = "1970-01-01")
View(dc_02)
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_001/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_01 <- ldply(myfiles, read_csv)
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_002/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_02 <- ldply(myfiles, read_csv)
dc_01$timestamp <- as.POSIXct(dc_01$timestamp, origin = "1970-01-01")
dc_02$timestamp <- as.POSIXct(dc_02$timestamp, origin = "1970-01-01")
dc <- bind_rows(dc_01, dc_02) %>% select(-prop_Position, -prop_Behaviour, timestamp, -resolution, -samplerate, -scale)
dc_behaviour <- dc %>% select(-Position) %>% na.omit()
dc <- dc_behaviour %>%
mutate(Behaviour = ifelse(grepl("f", Behaviour), "Foraging",
ifelse(grepl("F", Behaviour), "Foraging",
ifelse(grepl("Re", Behaviour), "Resting",
ifelse(grepl("rre", Behaviour), "Resting",
ifelse(grepl("Ru", Behaviour), "Ruminating", NA)))))) %>%
na.omit() %>%
mutate_if(is.numeric, ~ .*9.81) # convert to m/s² (gravitational force)
rm(dc_behaviour, dc_01, dc_02, mydir, myfiles)
View(dc)
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_001/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_01 <- ldply(myfiles, read_csv)
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_002/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_02 <- ldply(myfiles, read_csv)
dc_01$timestamp <- as.POSIXct(dc_01$timestamp, origin = "1970-01-01")
dc_02$timestamp <- as.POSIXct(dc_02$timestamp, origin = "1970-01-01")
dc <- bind_rows(dc_01, dc_02) %>% select(-prop_Position, -prop_Behaviour, timestamp, -resolution, -samplerate, -scale)
dc_behaviour <- dc %>% select(-Position) %>% na.omit()
dc_acc <- dc_behaviour %>%
mutate(Behaviour = ifelse(grepl("f", Behaviour), "Foraging",
ifelse(grepl("F", Behaviour), "Foraging",
ifelse(grepl("Re", Behaviour), "Resting",
ifelse(grepl("rre", Behaviour), "Resting",
ifelse(grepl("Ru", Behaviour), "Ruminating", NA)))))) %>%
na.omit() %>%
mutate_if(is.numeric, ~ .*9.81) # convert to m/s² (gravitational force)
rm(dc_behaviour, dc_01, dc_02, mydir, myfiles)
# ========== ACC data (labelled) ==========
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_001/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_01 <- ldply(myfiles, read_csv)
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_002/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_02 <- ldply(myfiles, read_csv)
dc_01$timestamp <- as.POSIXct(dc_01$timestamp, origin = "1970-01-01")
dc_02$timestamp <- as.POSIXct(dc_02$timestamp, origin = "1970-01-01")
dc_acc <- bind_rows(dc_01, dc_02) %>% select(-prop_Position, -prop_Behaviour, timestamp, -resolution, -samplerate, -scale)
dc_acc <- dc_acc %>% select(-Position) %>% na.omit()
dc_acc <- dc_behaviour %>%
mutate(Behaviour = ifelse(grepl("f", Behaviour), "Foraging",
ifelse(grepl("F", Behaviour), "Foraging",
ifelse(grepl("Re", Behaviour), "Resting",
ifelse(grepl("rre", Behaviour), "Resting",
ifelse(grepl("Ru", Behaviour), "Ruminating", NA)))))) %>%
na.omit() %>%
mutate_if(is.numeric, ~ .*9.81) # convert to m/s² (gravitational force)
dc_acc <- dc_acc %>%
mutate(Behaviour = ifelse(grepl("f", Behaviour), "Foraging",
ifelse(grepl("F", Behaviour), "Foraging",
ifelse(grepl("Re", Behaviour), "Resting",
ifelse(grepl("rre", Behaviour), "Resting",
ifelse(grepl("Ru", Behaviour), "Ruminating", NA)))))) %>%
na.omit() %>%
mutate_if(is.numeric, ~ .*9.81) # convert to m/s² (gravitational force)
rm(dc_01, dc_02, mydir, myfiles)
# ========== Matching GPS data ==========
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_001/GPS"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_01 <- ldply(myfiles, read_csv)
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_002/GPS"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_02 <- ldply(myfiles, read_csv)
View(dc_01)
dc_01$timestamp <- as.POSIXct(dc_01$timestamp, origin = "1970-01-01")
dc_02$timestamp <- as.POSIXct(dc_02$timestamp, origin = "1970-01-01")
rm(dc)
View(dc_01)
require(rabc)
library(randomForest)
rm(dc_01, dc_02)
rm(mydir, myfiles)
View(dc_acc)
##################################################################################################################
#################################### ACC Classification (Random Forest) ####################################
##################################################################################################################
library(plyr)
library(tidyverse)
setwd("/Users/serpent/Documents/VHL/RAAK/Stats/Class (MWe)/Random Forest")
rm(list=ls()) # clean global environment
# Step 1: Get data with labels, merge ACC with GPS, keep only labelled bursts with ACC data, build Random Forest, start wiht DC
# ========== ACC data (labelled) ==========
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_001/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_01 <- ldply(myfiles, read_csv)
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_002/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_02 <- ldply(myfiles, read_csv)
dc_01$timestamp <- as.POSIXct(dc_01$timestamp, origin = "1970-01-01")
dc_02$timestamp <- as.POSIXct(dc_02$timestamp, origin = "1970-01-01")
dc_acc <- bind_rows(dc_01, dc_02) %>% select(-prop_Position, -prop_Behaviour, timestamp, -resolution, -samplerate, -scale)
dc_acc <- dc_acc %>% select(-Position) %>% na.omit()
dc_acc <- dc_acc %>%
mutate(Behaviour = ifelse(grepl("f", Behaviour), "Foraging",
ifelse(grepl("F", Behaviour), "Foraging",
ifelse(grepl("Re", Behaviour), "Resting",
ifelse(grepl("rre", Behaviour), "Resting",
ifelse(grepl("Ru", Behaviour), "Ruminating", NA)))))) %>%
na.omit() %>%
mutate_if(is.numeric, ~ .*9.81) %>% # convert to m/s² (gravitational force)
rename(Label == Behaviour)
dc_acc <- dc_acc %>%
mutate(Behaviour = ifelse(grepl("f", Behaviour), "Foraging",
ifelse(grepl("F", Behaviour), "Foraging",
ifelse(grepl("Re", Behaviour), "Resting",
ifelse(grepl("rre", Behaviour), "Resting",
ifelse(grepl("Ru", Behaviour), "Ruminating", NA)))))) %>%
na.omit() %>%
mutate_if(is.numeric, ~ .*9.81) # convert to m/s² (gravitational force)
rm(dc_01, dc_02, mydir, myfiles)
features <- dc_acc %>%
group_by(Behaviour) %>% # Assuming "Label" is your target variable
summarize(
mean_x = mean(x),
mean_y = mean(y),
mean_z = mean(z),
sd_x = sd(x),
sd_y = sd(y),
sd_z = sd(z),
min_x = min(x),
min_y = min(y),
min_z = min(z),
max_x = max(x),
max_y = max(y),
max_z = max(z)
# Add more features as needed
) %>%
ungroup()
View(dc_acc)
View(dc_acc)
rownames(dc_acc) <- NULL
start_idx <- 2
end_idx <- 301
features <- accel_data %>%
select(start_idx:end_idx) %>%
mutate(burst_mean_x = rowMeans(select(., starts_with("x"))),
burst_mean_y = rowMeans(select(., starts_with("y"))),
burst_mean_z = rowMeans(select(., starts_with("z"))),
burst_sd_x = rowSds(select(., starts_with("x"))),
burst_sd_y = rowSds(select(., starts_with("y"))),
burst_sd_z = rowSds(select(., starts_with("z"))),
burst_min_x = rowMins(select(., starts_with("x"))),
burst_min_y = rowMins(select(., starts_with("y"))),
burst_min_z = rowMins(select(., starts_with("z"))),
burst_max_x = rowMaxs(select(., starts_with("x"))),
burst_max_y = rowMaxs(select(., starts_with("y"))),
burst_max_z = rowMaxs(select(., starts_with("z")))
)
features <- dc_acc %>%
select(start_idx:end_idx) %>%
mutate(burst_mean_x = rowMeans(select(., starts_with("x"))),
burst_mean_y = rowMeans(select(., starts_with("y"))),
burst_mean_z = rowMeans(select(., starts_with("z"))),
burst_sd_x = rowSds(select(., starts_with("x"))),
burst_sd_y = rowSds(select(., starts_with("y"))),
burst_sd_z = rowSds(select(., starts_with("z"))),
burst_min_x = rowMins(select(., starts_with("x"))),
burst_min_y = rowMins(select(., starts_with("y"))),
burst_min_z = rowMins(select(., starts_with("z"))),
burst_max_x = rowMaxs(select(., starts_with("x"))),
burst_max_y = rowMaxs(select(., starts_with("y"))),
burst_max_z = rowMaxs(select(., starts_with("z")))
)
library(rabc)
View(dc_acc)
labels <- dc_acc$Behaviour
dc_acc<- order_acc(df_raw = dc_acc)
View(dc_acc)
df_time <- calculate_feature_time(df_raw = dc_acc, winlen_dba = 10)
dc_acc$timestamp <- NULL
df_time <- calculate_feature_time(df_raw = dc_acc, winlen_dba = 10)
View(df_time)
df_freq <- calculate_feature_freq(df_raw = dc_acc, samp_freq = 10)
acc_desc <- bind_cols(df_time, df_freq)
View(acc_desc)
features <- select_features(df_feature = acc_desc, filter = TRUE, vec_label = labels, no_features = 10)
warnings()
View(features)
View(features)
features <- acc_desc %>% select(any_of(features$features))
dat_rf <- acc_desc
dat_rf$Label <- labels
# XGBoost
mod1 <- train_model(df = acc_desc, vec_label = labels)
mod2 <- train_model(df = features, vec_label = labels)
# Random Forest
dat_rf <- acc_desc
dat_rf$Label <- labels
mod3 <- randomForest(Label ~., data = dat_rf)
View(dat_rf)
class(dat_rf$y_mean)
set.seed(123)
train_indices <- sample(1:nrow(dat_rf), 0.7 * nrow(dat_rf)) # 70% for training
train_data <- features[train_indices, ]
test_data <- features[-train_indices, ]
mod3 <- randomForest(Label ~., data = train_data)
View(train_data)
# Random Forest
dat_rf <- acc_desc
dat_rf$Label <- labels
set.seed(123)
train_indices <- sample(1:nrow(dat_rf), 0.7 * nrow(dat_rf)) # 70% for training
train_data <- features[train_indices, ]
test_data <- features[-train_indices, ]
View(train_data)
train_indices <- sample(1:nrow(dat_rf), 0.7 * nrow(dat_rf)) # 70% for training
train_data <- dat_rf[train_indices, ]
test_data <- dat_rf[-train_indices, ]
View(train_data)
mod3 <- randomForest(Label ~., data = train_data)
# Random Forest
dat_rf <- acc_desc
dat_rf$Label <- as.factor(labels)
set.seed(123)
train_indices <- sample(1:nrow(dat_rf), 0.7 * nrow(dat_rf)) # 70% for training
train_data <- dat_rf[train_indices, ]
test_data <- dat_rf[-train_indices, ]
mod3 <- randomForest(Label ~., data = train_data)
View(mod3)
mod3
predictions <- predict(mod3, newdata = test_data)
accuracy <- mean(predictions == test_data$Label)
mean(predict(mod3, newdata = test_data) == test_data$Label)
tuned_mod3 <- tuneRF(train_data[, -1], train_data$Label, ntreeTry = 500, stepFactor = 1.5)
best_mtry <- tuned_mod3$mtry
View(train_data)
tuned_mod3 <- tuneRF(train_data[, -29], train_data$Label, ntreeTry = 500, stepFactor = 1.5)
best_mtry <- tuned_mod3$mtry
View(tuned_mod3)
View(acc_desc)
kmeans_result <- kmeans(acc_desc, centers = k)
kmeans_result <- kmeans(acc_desc, centers = 3)
##################################################################################################################
#################################### ACC Classification (Random Forest) ####################################
##################################################################################################################
library(randomForest)
library(plyr)
library(tidyverse)
setwd("/Users/serpent/Documents/VHL/RAAK/Stats/Class (MWe)/Random Forest")
rm(list=ls()) # clean global environment
# Step 1: Get data with labels, merge ACC with GPS, keep only labelled bursts with ACC data, build Random Forest, start wiht DC
# ========== ACC data (labelled) ==========
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_001/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_01 <- ldply(myfiles, read_csv)
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_002/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_02 <- ldply(myfiles, read_csv)
dc_01$timestamp <- as.POSIXct(dc_01$timestamp, origin = "1970-01-01")
dc_02$timestamp <- as.POSIXct(dc_02$timestamp, origin = "1970-01-01")
dc_acc <- bind_rows(dc_01, dc_02) %>% select(-prop_Position, -prop_Behaviour, timestamp, -resolution, -samplerate, -scale)
dc_acc <- dc_acc %>% select(-Position) %>% na.omit()
dc_acc <- dc_acc %>%
mutate(Behaviour = ifelse(grepl("f", Behaviour), "Foraging",
ifelse(grepl("F", Behaviour), "Foraging",
ifelse(grepl("Re", Behaviour), "Resting",
ifelse(grepl("rre", Behaviour), "Resting",
ifelse(grepl("Ru", Behaviour), "Ruminating", NA)))))) %>%
na.omit() %>%
mutate_if(is.numeric, ~ .*9.81) # convert to m/s² (gravitational force)
rm(dc_01, dc_02, mydir, myfiles)
library(randomForest)
library(rabc)
labels <- dc_acc$Behaviour
dc_acc$timestamp <- NULL
dc_acc <- order_acc(df_raw = dc_acc)
df_time <- calculate_feature_time(df_raw = dc_acc, winlen_dba = 10)
df_freq <- calculate_feature_freq(df_raw = dc_acc, samp_freq = 10)
acc_desc <- bind_cols(df_time, df_freq)
features <- select_features(df_feature = acc_desc, filter = TRUE, vec_label = labels, no_features = 10)
features <- acc_desc %>% select(any_of(features$features))
# XGBoost
mod1 <- train_model(df = acc_desc, vec_label = labels)
View(features)
library(knitr)
library(cowplot)
library(rabc)
library(DT)
library(kableExtra)
library(plyr)
library(tidyverse)
ovp <- read_csv("/Users/serpent/Documents/VHL/RAAK/Stats/Class (MWe)/RABC/labelled_old_only_ovp.csv") %>%
mutate(Behaviour = ifelse(grepl("Foraging", behaviour), "Foraging",
ifelse(grepl("Resting", behaviour), "Resting",
ifelse(grepl("Walking", behaviour), "Foraging", NA)))) %>%
select(-behaviour) %>%
mutate_if(is.numeric, ~ .*9.81) # convert to m/s² (gravitational force)
table(ovp$Behaviour)
ovp <- read_csv("/Users/serpent/Documents/VHL/RAAK/Stats/Class (MWe)/RABC/labelled_old_only_ovp.csv") %>%
mutate(Behaviour = ifelse(grepl("Foraging", behaviour), "Foraging",
ifelse(grepl("Resting", behaviour), "Resting",
ifelse(grepl("Walking", behaviour), "Foraging", NA)))) %>%
select(-behaviour) %>%
mutate_if(is.numeric, ~ .*9.81) # convert to m/s² (gravitational force)
View(ovp)
table(ovp$Behaviour)
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_001/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_01 <- ldply(myfiles, read_csv)
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_002/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_02 <- ldply(myfiles, read_csv)
dc <- bind_rows(dc_01, dc_02) %>% select(-prop_Position, -prop_Behaviour, timestamp, -resolution, -samplerate, -scale)
dc <- dc %>% select(-Position, -timestamp) %>% na.omit()
dc <- dc %>%
mutate(Behaviour = ifelse(grepl("f", Behaviour), "Foraging",
ifelse(grepl("F", Behaviour), "Foraging",
ifelse(grepl("Re", Behaviour), "Resting",
ifelse(grepl("rre", Behaviour), "Resting",
ifelse(grepl("Ru", Behaviour), "Ruminating", NA)))))) %>%
na.omit() %>%
mutate_if(is.numeric, ~ .*9.81) # convert to m/s² (gravitational force)
rm(dc_01, dc_02, mydir, myfiles)
table(dc$Behaviour)
all <- bind_rows(dc, ovp)
table(all$Behaviour)
ovp <- order_acc(df_raw = ovp)
dc  <- order_acc(df_raw = dc)
all <- order_acc(df_raw = all)
# OVP
ovp_labels <- ovp$Behaviour
df_time <- calculate_feature_time(df_raw = ovp, winlen_dba = 10)
df_freq <- calculate_feature_freq(df_raw = ovp, samp_freq = 10)
ovp <- bind_cols(df_time, df_freq)
View(ovp)
# DC
dc_labels <- dc$Behaviour
df_time <- calculate_feature_time(df_raw = dc, winlen_dba = 10)
dc <- bind_cols(df_time, df_freq)
# All
all_labels <- all$Behaviour
df_time <- calculate_feature_time(df_raw = all, winlen_dba = 10)
df_freq <- calculate_feature_freq(df_raw = all, samp_freq = 10)
all <- bind_cols(df_time, df_freq)
rm(df_time, df_freq)
datatable(bind_cols(as_tibble_col(all_labels, column_name = "Behaviour"), all),
options = list(scrollX = TRUE, rownames = FALSE,
columnDefs = list(list(visible = TRUE, targets = c(6:28))),
caption = "Descriptive features of ovp + dc data"))
ovp_best <- select_features(df_feature = ovp, filter = TRUE, vec_label = ovp_labels, no_features = 10)
ovp_best <- select_features(df_feature = ovp, filter = TRUE, vec_label = ovp_labels, no_features = 10)
ovp_best <- ovp %>% select(any_of(ovp_best$features))
all_best <- select_features(df_feature = all, filter = TRUE, vec_label = all_labels, no_features = 10)
all_best <- select_features(df_feature = all, filter = TRUE, vec_label = all_labels, no_features = 10)
all_best <- all %>% select(any_of(all_best$features))
colnames(all_best)
ovp_xgb_all  <- train_model(df = ovp, vec_label = ovp_labels)
ovp_xgb_best <- train_model(df = ovp_best, vec_label = ovp_labels)
View(ovp_best)
ovp_xgb_best
plot_feature(df_feature = ovp_best[, "z_freqamp", drop = FALSE], vec_label = ovp_labels)
ovp <- read_csv("/Users/serpent/Documents/VHL/RAAK/Stats/Class (MWe)/RABC/labelled_old_only_ovp.csv") %>%
mutate(Behaviour = ifelse(grepl("Foraging", behaviour), "Foraging",
ifelse(grepl("Resting", behaviour), "Resting",
ifelse(grepl("Walking", behaviour), "Foraging", NA)))) %>%
select(-behaviour) %>%
mutate_if(is.numeric, ~ .*9.81) # convert to m/s² (gravitational force)
table(ovp$Behaviour)
ovp <- order_acc(df_raw = ovp)
plot_acc(df_raw = ovp, axis_num = 3)
plot_acc(df_raw = all, axis_num = 3)
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_001/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_01 <- ldply(myfiles, read_csv)
mydir <- "/Users/serpent/Documents/VHL/RAAK/Data/dairy campus/DC_002/ACC"
myfiles <- list.files(path=mydir, pattern="*.CSV", full.names=TRUE)
dc_02 <- ldply(myfiles, read_csv)
dc <- bind_rows(dc_01, dc_02) %>% select(-prop_Position, -prop_Behaviour, timestamp, -resolution, -samplerate, -scale)
dc <- dc %>% select(-Position, -timestamp) %>% na.omit()
dc <- dc %>%
mutate(Behaviour = ifelse(grepl("f", Behaviour), "Foraging",
ifelse(grepl("F", Behaviour), "Foraging",
ifelse(grepl("Re", Behaviour), "Resting",
ifelse(grepl("rre", Behaviour), "Resting",
ifelse(grepl("Ru", Behaviour), "Ruminating", NA)))))) %>%
na.omit() %>%
mutate_if(is.numeric, ~ .*9.81) # convert to m/s² (gravitational force)
rm(dc_01, dc_02, mydir, myfiles)
table(dc$Behaviour)
all <- order_acc(df_raw = all)
all <- bind_rows(dc, ovp)
table(all$Behaviour)
all <- order_acc(df_raw = all)
plot_acc(df_raw = all, axis_num = 3)
# OVP
ovp_labels <- ovp$Behaviour
df_time <- calculate_feature_time(df_raw = ovp, winlen_dba = 10)
df_freq <- calculate_feature_freq(df_raw = ovp, samp_freq = 10)
ovp <- bind_cols(df_time, df_freq)
# DC
dc_labels <- dc$Behaviour
df_time <- calculate_feature_time(df_raw = dc, winlen_dba = 10)
df_freq <- calculate_feature_freq(df_raw = dc, samp_freq = 10)
dc <- bind_cols(df_time, df_freq)
# All
all_labels <- all$Behaviour
df_time <- calculate_feature_time(df_raw = all, winlen_dba = 10)
all <- bind_cols(df_time, df_freq)
# All
all_labels <- all$Behaviour
df_time <- calculate_feature_time(df_raw = all, winlen_dba = 10)
df_freq <- calculate_feature_freq(df_raw = all, samp_freq = 10)
all <- bind_cols(df_time, df_freq)
rm(df_time, df_freq)
datatable(bind_cols(as_tibble_col(all_labels, column_name = "Behaviour"), all),
options = list(scrollX = TRUE, rownames = FALSE,
columnDefs = list(list(visible = TRUE, targets = c(6:28))),
caption = "Descriptive features of ovp + dc data"))
ovp_best <- select_features(df_feature = ovp, filter = TRUE, vec_label = ovp_labels, no_features = 10)
ovp_best <- ovp %>% select(any_of(ovp_best$features))
colnames(ovp_best)
dc_best <- select_features(df_feature = dc, filter = TRUE, vec_label = dc_labels, no_features = 10)
dc_best <- dc %>% select(any_of(dc_best$features))
colnames(dc_best)
all_best <- select_features(df_feature = all, filter = TRUE, vec_label = all_labels, no_features = 10)
all_best <- select_features(df_feature = all, filter = TRUE, vec_label = all_labels, no_features = 10)
all_best <- all %>% select(any_of(all_best$features))
